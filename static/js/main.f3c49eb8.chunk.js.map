{"version":3,"sources":["Components/Todolist.module.css","serviceWorker.ts","Components/AddItemForm.tsx","Components/EditadleSpan.tsx","Components/Todolist.tsx","state/tasks-reducer.ts","state/todolist-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","size","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","color","style","maxWidth","maxHeight","minWidth","minHeight","onClick","AddBox","EditadleSpan","editeMode","setEditeMode","onBlur","autoFocus","onDoubleClick","Todolist","newTitle","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","task","className","isDone","s","Checkbox","checked","newIsDoneValue","changeTaskStatus","changeTaskTitle","removeTask","Button","filter","changeFilter","initialState","AppWithRedux","v1","todolists","useSelector","state","dispatch","useDispatch","todolistId","taskId","type","removeTaskAC","addTaskAC","changeTaskStatusAC","changeTaskTitleusAC","action","ChangeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","spacing","padding","AddTodolistAC","todolist","allTodoListTasks","tasksForTodolists","item","Paper","rootReducer","combineReducers","copyState","find","t","tl","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f3c49eb8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Todolist_error__3Nxvx\",\"errorMessage\":\"Todolist_errorMessage__2KxAB\",\"activeFilter\":\"Todolist_activeFilter__1EIY6\",\"isDone\":\"Todolist_isDone__1JK0n\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (event.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant={'outlined'}\r\n                   size={\"small\"}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={'Title'}\r\n                   helperText={error}\r\n        />\r\n        <IconButton color={'primary'} size={\"small\"}\r\n                style={{maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'}}\r\n                onClick={() => {addItem()}}><AddBox/>\r\n        </IconButton>\r\n\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype EditadleSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\n\r\nexport const EditadleSpan = (props: EditadleSpanPropsType) => {\r\n    let [editeMode, setEditeMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditeMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditeMode(false);\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (event: ChangeEvent<HTMLInputElement>) => setTitle(event.currentTarget.value)\r\n\r\n    return editeMode\r\n        ? <TextField variant={'outlined'}\r\n            value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValueType} from \"../App\";\r\nimport s from \"./Todolist.module.css\"\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditadleSpan} from \"./EditadleSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    filter: FilterValueType\r\n    id: string\r\n    removeTodolist: (id: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport const Todolist = (props: TodolistPropsType) => {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const changeTodolistTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditadleSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolistHandler}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {props.tasks.map((task) => {\r\n                    const onClickHandler = () => {\r\n                        props.removeTask(task.id, props.id)\r\n                    }\r\n                    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = event.currentTarget.checked\r\n                        props.changeTaskStatus(task.id, newIsDoneValue, props.id)\r\n\r\n                    }\r\n                    const onChangeTitleHandler = (newTitle: string) => {\r\n                        props.changeTaskTitle(task.id, newTitle, props.id)\r\n\r\n                    }\r\n                    return (\r\n                        <li className={task.isDone ? s.isDone : \"\"} key={task.id}>\r\n                            <Checkbox color={'primary'}\r\n                                   checked={task.isDone}\r\n                                   onChange={onChangeHandler}/>\r\n                            <EditadleSpan title={task.title} onChange={onChangeTitleHandler}/>\r\n                           <IconButton onClick={onClickHandler}>\r\n                               <Delete style={{maxWidth: '20px', maxHeight: '20px', minWidth: '20px', minHeight: '20px'}}/>\r\n                           </IconButton>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? 'outlined' : 'text'}\r\n                        onClick={onAllClickHandler}\r\n                        color={'inherit'}\r\n                >All\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? 'outlined' : 'text'}\r\n                        onClick={onActiveClickHandler}\r\n                        color={'inherit'}\r\n                >Active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? 'outlined' : 'text'}\r\n                        onClick={onCompletedClickHandler}\r\n                        color={'inherit'}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {TasksStateType, TodolistsType} from \"../App\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolist-reducer\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type RemoveTASKActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\n\r\ntype ActionType = RemoveTASKActionType | AddTaskActionType |\r\n    ChangeTaskStatusActionType | ChangeTaskTitleActionType | AddTodolistActionType |\r\n    RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .filter(task => task.id !== action.taskId)\r\n            }\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{id: v1(), title: action.title, isDone: false},\r\n                    ...state[action.todolistId]]\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => task.id === action.taskId\r\n                    ? {...task, isDone: action.isDone} : task)\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => task.id === action.taskId\r\n                    ? {...task, title: action.title} : task)\r\n\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTASKActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleusAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n\r\n\r\n\r\n","import {FilterValueType, TodolistsType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValueType\r\n}\r\n\r\nconst initialState: Array<TodolistsType> = []\r\n\r\ntype ActionType = RemoveTodolistActionType | AddTodolistActionType |\r\n    ChangeTodolistTitleActionType | ChangeTodolistFilterActionType\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionType): Array<TodolistsType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(todolists => todolists.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [...state, {id: action.todolistId, title: action.title, filter: 'all'}]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todolist = state.find(t => t.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n        default:\r\n           return state\r\n    }\r\n\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const ChangeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const ChangeTodolistFilterAC = (id: string, filter: FilterValueType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}","import React from 'react';\r\n// import './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TasksType, Todolist} from \"./Components/Todolist\";\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleusAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {AddTodolistAC, ChangeTodolistFilterAC, ChangeTodolistTitleAC, RemoveTodolistAC} from \"./state/todolist-reducer\";\r\n\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todolistID1 = v1()\r\n    let todolistID2 = v1()\r\n\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistsType>>(state => state.todolists)\r\n\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const removeTask = (id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId))\r\n    }\r\n\r\n    const addTask = (title: string, todolistId: string) => {\r\n        dispatch(addTaskAC(title, todolistId))\r\n    }\r\n\r\n    const changeTaskStatus = (id: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n        }\r\n\r\n    const changeTaskTitle = (id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleusAC(id, newTitle, todolistId))\r\n\r\n    }\r\n//--------------------------------------------------------------------------------------------------------//\r\n    const changeFilter = (value: FilterValueType, todolistId: string) => {\r\n        dispatch(ChangeTodolistFilterAC(todolistId, value))\r\n    }\r\n\r\n    const removeTodolist = (id: string) => {\r\n        let action = RemoveTodolistAC(id)\r\n        dispatch(action)\r\n    }\r\n\r\n    const changeTodolistTitle = (id: string, newTitle: string) => {\r\n        dispatch(ChangeTodolistTitleAC(id, newTitle))\r\n\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        let action = AddTodolistAC(title)\r\n        dispatch(action)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge={\"start\"} color={\"inherit\"} aria-label={\"menu\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolist\r\n                    </Typography>\r\n                    <Button color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(todolist => {\r\n                            let allTodoListTasks = tasks[todolist.id]\r\n                            let tasksForTodolists = allTodoListTasks\r\n                            if (todolist.filter === \"active\") {\r\n                                tasksForTodolists = allTodoListTasks.filter(task => !task.isDone)\r\n                            }\r\n                            if (todolist.filter === \"completed\") {\r\n                                tasksForTodolists = allTodoListTasks.filter(task => task.isDone)\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={todolist.id}\r\n                                        id={todolist.id}\r\n                                        title={todolist.title}\r\n                                        tasks={tasksForTodolists}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        filter={todolist.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })}\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {combineReducers, legacy_createStore as createStore} from 'redux';\r\nimport {todolistsReducer} from \"./todolist-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <AppWithRedux/>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}